// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.EntityFramework;

namespace WebApi.EntityFramework.Migrations
{
    [DbContext(typeof(WebApiDbContext))]
    [Migration("20201202082919_AddTableDbAuditlog")]
    partial class AddTableDbAuditlog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotImageResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ClickLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Collect")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PayCoin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TrigeminyUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrigeminyUserId");

                    b.ToTable("DbHotImageResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotImageResourceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DbHotImageReSourceId")
                        .HasColumnType("int");

                    b.Property<int>("DbImageResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbHotImageReSourceId");

                    b.HasIndex("DbImageResourceId");

                    b.ToTable("DbHotImageReSourceUsers");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotMusicResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ClickLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Collect")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DbImageResourceId")
                        .HasColumnType("int");

                    b.Property<int>("DbUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImageResourceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PayCoin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DbImageResourceId");

                    b.HasIndex("DbUserId");

                    b.ToTable("DbHotMusicResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotMusicResourceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DbHotMusicReSourceId")
                        .HasColumnType("int");

                    b.Property<int>("DbMusicResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbHotMusicReSourceId");

                    b.HasIndex("DbMusicResourceId");

                    b.ToTable("DbHotMusicResourceUsers");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotVedioResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ClickLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Collect")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DbImageResourceId")
                        .HasColumnType("int");

                    b.Property<int>("DbUserIdUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImageResourceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PayCoin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TrigeminyUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbImageResourceId");

                    b.HasIndex("TrigeminyUserId");

                    b.ToTable("DbHotVedioResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotVedioResourceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DbHotVedioReSourceId")
                        .HasColumnType("int");

                    b.Property<int>("DbVedioResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbHotVedioReSourceId");

                    b.HasIndex("DbVedioResourceId");

                    b.ToTable("HotVedioResourceUsers");
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbImageResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanDownloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DbUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<int>("ImageGroup")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifierUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResourceLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ResourceSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("VisitCount")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DbUserId");

                    b.HasIndex("Title");

                    b.ToTable("DbImageResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbMusicResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanDownloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int>("DbUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifierUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MusicGroup")
                        .HasColumnType("int");

                    b.Property<string>("ResourceLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ResourceSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("VisitCount")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DbUserId");

                    b.HasIndex("Title");

                    b.ToTable("DbMusicResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbVedioResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanDownloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int>("DbUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifierUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastModifionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResourceLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ResourceSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("VedioGroup")
                        .HasColumnType("int");

                    b.Property<bool>("VisitCount")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DbUserId");

                    b.HasIndex("Title");

                    b.ToTable("DbVedioResources");
                });

            modelBuilder.Entity("WebApi.Core.Entity.SystemLog.DbAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Expection")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Userid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DbAuditLogs");
                });

            modelBuilder.Entity("WebApi.Core.Entity.User.DbAccountUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountSatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAccountTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DbAccountUsers");
                });

            modelBuilder.Entity("WebApi.Core.Entity.User.DbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("First_Name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("User_AccountUser_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("User_AccountUser_Id")
                        .IsUnique();

                    b.ToTable("DbUsers");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotImageResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.User.DbUser", "TrigeminyUser")
                        .WithMany()
                        .HasForeignKey("TrigeminyUserId");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotImageResourceUser", b =>
                {
                    b.HasOne("WebApi.Core.Entity.HotResource.DbHotImageResource", "DbHotImageResource")
                        .WithMany("DbHotImageReSourceUsers")
                        .HasForeignKey("DbHotImageReSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Core.Entity.Resource.DbImageResource", "DbImageResource")
                        .WithMany("DbHotImageReSourceUsers")
                        .HasForeignKey("DbImageResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotMusicResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.Resource.DbImageResource", "DbImageResource")
                        .WithMany()
                        .HasForeignKey("DbImageResourceId");

                    b.HasOne("WebApi.Core.Entity.User.DbUser", "TrigeminyUser")
                        .WithMany()
                        .HasForeignKey("DbUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotMusicResourceUser", b =>
                {
                    b.HasOne("WebApi.Core.Entity.HotResource.DbHotMusicResource", "DbHotMusicResource")
                        .WithMany("DbHotMusicResourceUsers")
                        .HasForeignKey("DbHotMusicReSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Core.Entity.Resource.DbMusicResource", "DbMusicResource")
                        .WithMany("DbHotMusicResourceUsers")
                        .HasForeignKey("DbMusicResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotVedioResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.Resource.DbImageResource", "DbImageResource")
                        .WithMany()
                        .HasForeignKey("DbImageResourceId");

                    b.HasOne("WebApi.Core.Entity.User.DbUser", "TrigeminyUser")
                        .WithMany()
                        .HasForeignKey("TrigeminyUserId");
                });

            modelBuilder.Entity("WebApi.Core.Entity.HotResource.DbHotVedioResourceUser", b =>
                {
                    b.HasOne("WebApi.Core.Entity.HotResource.DbHotVedioResource", "DbHotVedioResource")
                        .WithMany("DbHotVedioResourceUsers")
                        .HasForeignKey("DbHotVedioReSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Core.Entity.Resource.DbVedioResource", "DbVedioResource")
                        .WithMany("DbHotVedioResourceUsers")
                        .HasForeignKey("DbVedioResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbImageResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.User.DbUser", null)
                        .WithMany("DbImageResources")
                        .HasForeignKey("DbUserId");
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbMusicResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.User.DbUser", "DbUser")
                        .WithMany()
                        .HasForeignKey("DbUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.Resource.DbVedioResource", b =>
                {
                    b.HasOne("WebApi.Core.Entity.User.DbUser", "DbUser")
                        .WithMany()
                        .HasForeignKey("DbUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Core.Entity.User.DbUser", b =>
                {
                    b.HasOne("WebApi.Core.Entity.User.DbAccountUser", "DbAccountUser")
                        .WithOne("DbUser")
                        .HasForeignKey("WebApi.Core.Entity.User.DbUser", "User_AccountUser_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
